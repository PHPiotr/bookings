#!/usr/bin/env node

const {app, server} = require('../app');
const debug = require('debug')('bookings:server');
const http = require('http');

const normalizePort = (val) => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
};

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

server.listen(port, () => {
    console.log('Listening on ' + port);
});

server.on('error', (error) => {
   if (error.syscall !== 'listen') {
       throw error;
   }

   var bind = typeof port === 'string'
       ? 'Pipe ' + port
       : 'Port ' + port;

   // handle specific listen errors with friendly messages
   switch (error.code) {
       case 'EACCES':
           console.error(bind + ' requires elevated privileges');
           process.exit(1);
           break;
       case 'EADDRINUSE':
           console.error(bind + ' is already in use');
           process.exit(1);
           break;
       default:
           throw error;
   }
});

server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
});
